import { fetchWithRetry } from './retryRequest.js';
async function fetchBanksData() {
    try {
        const url = 'https://api.vendista.ru:99/banks/availability';
        const response = await fetchWithRetry(url, {
            retries: 3,
            timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });
        return parseBanksData(response);
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–∫–∞—Ö');
    }
}
function parseBanksData(apiResponse) {
    if (!apiResponse.success) {
        throw new Error('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
    }
    return apiResponse.items.map((item) => ({
        name: item.bank_name,
        availability: item.current_success_percent
    }));
}
function formatBanksData(banks) {
    let result = '<b>–¢–µ–∫—É—â–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–Ω–∫–æ–≤:</b>\n\n';
    const maxNameLength = Math.max(...banks.map(b => b.name.length));
    const availabilityThreshold = parseFloat(process.env.AVAILABILITY_PERCENT || "0");
    banks.forEach(bank => {
        const availabilityColor = bank.availability < availabilityThreshold ? 'üî¥' : 'üü¢';
        const paddedName = bank.name.padEnd(maxNameLength, ' ');
        result += `<code>${availabilityColor} ${paddedName} | ${bank.availability.toFixed(2)}%</code>\n`;
    });
    result += `\n<i>üî¥ - –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∏–∂–µ ${availabilityThreshold}%</i>`;
    return result;
}
export { fetchBanksData, parseBanksData, formatBanksData };

import { Bot, Context } from 'grammy';
import axios from 'axios';
import * as cheerio from 'cheerio';
import dotenv from 'dotenv';
dotenv.config();

interface BankData {
    name: string;
    availability: number;
}

const token = process.env.BOT_TOKEN;
const bot = new Bot(token as string);
const chatId = process.env.TELEGRAM_CHAT_ID;
const availabilityThresholdString = process.env.AVAILABILITY_PERCENT;

async function sendStartupNotification() {
    try {
        const chatId = process.env.TELEGRAM_CHAT_ID;

        if (!chatId) {
            console.error('–û—à–∏–±–∫–∞: TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–æ!');
            return;
        }

        console.log(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: ${chatId}`); // –õ–æ–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

        const result = await bot.api.sendMessage(
            chatId,
            'ü§ñ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω!\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /banks –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n' +
            '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö.'
        );
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:');

        if (axios.isAxiosError(error)) {
            console.error('Axios error:', error.response?.data);
        } else if (error instanceof Error) {
            console.error('Error message:', error.message);

            // –î–ª—è Telegram API –æ—à–∏–±–æ–∫
            if ('description' in error) {
                console.error('Telegram API error:', error.description);
            }
        } else {
            console.error('Unknown error:', error);
        }
    }
}



bot.command('banks', async (ctx: Context) => {
    try {
        await ctx.reply('–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–∫–∞—Ö...');
        const banksData = await fetchBanksData();
        const formattedData = formatBanksData(banksData);
        await ctx.reply(formattedData, { parse_mode: 'HTML' });
        await checkAndNotifyLowAvailability(banksData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
    }
});

async function fetchBanksData(): Promise<BankData[]> {
    const url = 'https://vendista.ru/banks_availability';
    const response = await axios.get(url);
    return parseBanksData(response.data);
}

function parseBanksData(html: string): BankData[] {
    const $ = cheerio.load(html);
    const banks: BankData[] = [];

    $('table tr').each((_, row) => {
        const columns = $(row).find('td');
        if (columns.length >= 2) {
            const name = $(columns[0]).text().trim();
            const availabilityStr = $(columns[1]).text().trim().replace(',', '.');
            const availability = parseFloat(availabilityStr);

            if (name && !isNaN(availability)) {
                banks.push({ name, availability });
            }
        }
    });

    return banks;
}

function formatBanksData(banks: BankData[]): string {
    let result = '<b>–¢–µ–∫—É—â–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–Ω–∫–æ–≤:</b>\n\n';
    const maxNameLength = Math.max(...banks.map(b => b.name.length));

    const availabilityThreshold = parseFloat(process.env.AVAILABILITY_PERCENT || "0");

    banks.forEach(bank => {
        const availabilityColor = bank.availability < availabilityThreshold ? 'üî¥' : 'üü¢';
        const paddedName = bank.name.padEnd(maxNameLength, ' ');
        result += `<code>${availabilityColor} ${paddedName} | ${bank.availability.toFixed(2)}%</code>\n`;
    });

    result += `\n<i>üî¥ - –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∏–∂–µ ${availabilityThreshold}%</i>`;

    return result;
}


async function checkAndNotifyLowAvailability(banks: BankData[]) {


    if (!availabilityThresholdString) {
        console.error('–û—à–∏–±–∫–∞: AVAILABILITY_PERCENT –Ω–µ –∑–∞–¥–∞–Ω–æ!');
        return;
    }

    const availabilityThreshold = parseFloat(availabilityThresholdString);

    if (isNaN(availabilityThreshold)) {
        console.error('–û—à–∏–±–∫–∞: AVAILABILITY_PERCENT –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–¥–∞–Ω–æ!');
        return;
    }

    const problematicBanks = banks.filter(b => b.availability < availabilityThreshold);

    if (problematicBanks.length > 0) {
        let alertMessage = '‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–Ω–∫–æ–≤!</b>\n\n';

        problematicBanks.forEach(bank => {
            alertMessage += `‚ñ´Ô∏è <b>${bank.name}</b>: ${bank.availability.toFixed(2)}%\n`; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        });

        alertMessage += `\n<i>–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${availabilityThreshold}%</i>`; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        if (!chatId) {
            console.error('–û—à–∏–±–∫–∞: TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–æ!');
            return;
        }

        try {
            await bot.api.sendMessage(chatId, alertMessage, { parse_mode: 'HTML' });
            console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }
}


setInterval(async () => {
    try {
        console.log('–í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–Ω–∫–æ–≤...');
        const banksData = await fetchBanksData();
        await checkAndNotifyLowAvailability(banksData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
    }
}, 20 * 1000); // –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç


bot.start().then(async () => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    await sendStartupNotification();
}).catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:');

    if (error instanceof Error) {
        console.error(error.message);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Telegram API –æ—à–∏–±–æ–∫
        if ('response' in error) {
            console.error('Response data:', (error as any).response?.data);
        }
    } else {
        console.error(error);
    }
});